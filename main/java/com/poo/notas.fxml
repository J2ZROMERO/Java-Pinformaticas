En herencia se debe de entender que existen:

Persona.
Caracteristicas comunes: Nombre-Genero-Edad- Lugar de residencia.
Comportamientos comunes: Comen - Duermen - Hablan - Se mueven.
Cada clase puede tener sus propos comportamientos (metodos o variables).
Debemos de crear una raiz general que se ocupara para todos los objetos que se van a crear.

Podemos aplicar casi siempre la regla de "Es un" de la siguiente manera:
Un jefe siempre " es un  " empleado?
Un empleado " es  un " jefe?

En este ejemplo un Jefe siempre en un Empleado
al crear la herencia se coloca a:
Empleado arriba dejandolo como superclase o clase padre
Jefe abajo

Recordar por mucho que las cosas se vean extraordinarias todo siempre tiene una base.
Una clase que no tiene constructor este lleva un constructor por defecto,entonces este se agrega con el mismo nombre de
pero vacio.
Para heredar nosotros tenemos que usar la plabra reservada extends NdClase.

Al momento en que heredamos, al heredar el constructor necesitamos usar el constructor del mismo,
aqui entra la famosa palabra SUPER() -> esto quiero decir que viene viene de la superclase llamando al constructor de la
clase padre.

- Hay algo que se llama sobre escritura de metodos
-Podemos llamar a un incentivo como "comportamiento", pensar en esto al aplicar la herencia

- si nosotros creamos dos metodos iguales halando de herencia este segtundo sobreescribe al primero
- si queremos llamar a un metodo que se llama igual al que tenemos que usar super.getMetodo() --> desde el padre
- Una clase puede sobreescribir muchos metdos.

- si una clase no tiene constructor entonces esta tiene uno por defecto
- Cuando se herencia multiple se trata es cuando se debe de
- si creamos un metodo con el mismo nombre aun en cadena profunda de 5
- recordar que todo hereda de Object = clase cosmica = super clase padre esta esta en lo alto de la jerarquia de herencia
por lo tanto heredaran sus metodos. aqui nace el metodo toString();
- En java no existe la herencia multiple
- si nosotros queremos que una clase no se pueda heredar lo que debemos de hacer es
::::: final class clase3 extends otraclase(){} esto detiene la herendia ::::::
- recordar la  herarquia de herencia.
- recordar que agregar private solo encapsula el contenido en la misma clase.


MODIFICADORES DE ACCESO

variables - constantes - metodos - classes

public - permisivo
private - prohibitivo


modificador    clase > package > subclase > todos
public          si        si        si        si
private         si        no        no        no
protected       si        si        si        no
default         si        si        no        no

O heredamos o instanciamos
cuando se habla de subclase es herencia de clase a otra clase
todos = no puede acceder desde otro paquete una clase de paquete diferente y no heredamos
por defecto | default ==


// POLIMORFISMO-PRINCIPIO DE SUSTITUCION Y ENLAZADO DINAMICO

cuando nustra clase usada este  heredando de otra es entonces cuando podemos crear elementos padre y almacenar elementoshijos
siempre que se encuentre en  una herencia se podria hacerse de este modo

Polimorfismo = consiste en que un objecto puede tomar muchas poliformas / formas, este puede cambiar de forma
un ejemplo podria ser una sobre escritura de los metodos puede llamarse igual pero comportarse distinto
--> puede que todo sea igual pero si es sobreescrito ya tiene nuevos valores
--> Enlazado dinamico = es cuando java reconoce a que metodo es el que se debe de llamar, desde que clase esta siendo llamado

PRINCIPIO DE SUSTITUCION = " ES UN "

CASTING DE OBJECTOS ( tipos primitivos o de objetos)
= consiste en almacenar un variable de un tipo en otra variable de otro tipo
en el ejemplo de empleados  = upcasting = casting implicito

Upcasting =  un objecto heredante almacenarlo arriba;
downcasting = objecto de la clase superpadre a ser intentado almacenarlo en una clase jefes; (casting explicito);

(Jefes) Patricia  = downcasting = el principio de sustitucion = para hacer un casting necesitamos que el elemento  a
castear tenga algo del elemento dentro de.
DEBE DE HAVER UN OBJETO IGUAL AL QUE SE QUEIRE CASTEAR DENTRO DEL ELEMENTO CONTENEDOR DE

Empleado isa =  new Jefes();
Jefes isabel = (Jefes) isa;   //  el casting esta completo

significa jalar todos los metodos de esa persona o instancia a nuestra clase.

Agregar final enfrente de una clase la invalida para herencia.
Recordar que final invalida las clases para herencia

paso de  multiples parametros a un mismo metodo se le denomina POLIMORFISMO, ENLAZADO DINAMICO

si no deseamos que un metodo no se llame igual inclusive en herencia, impedir clases hereden otras con el mismo nombre

final public double getSueldo(); --> con esto nosotros heredamos clases pero no podemos crear algun metodo con el mismo
nombre de metodo
public final class algunaClase()  --> impedimos que una clase la usen para herencia

-------------
Clases abstractas
si nos apuntamos de abajo hacia arriba en una herencia --> estos son menos especifias menos funcionales o mejor dicho
mas abstractas

que es declarar un metodo abstracto = solo declarar el nombre del metodo pero nada mas no debemos desarrollarlo
por eso es que no se desarrolla.
public abstract String metodoAbstracto();
a esto es cuando nos preguntamos que pasa cuando queremos declarar un metodo abstracto
public String getName() probablemente lleve un mismo return variable que es name
pero el abstract puede llevar otras cosas
estas deben si o si implementarse una vez ques estas se heredan
se obliga  aser implementada
entonces una Clase abstracta es aquella clase que tiene al menos un metodo abstracto
entonces si hay un metodo abs entonces esta es una clase y se debe de declar como abstracta a esa clase.
y porque no declaro un metodo  a cada clase??? ENTONCES SE DICE QUE CUANDO SE HACE DE ESTE MODO ES PORQUE MARCAMOS LA PAUTA DEL DISEÑO
A SEGUIR OSEA QUE DEBEMOS SI O SI OBLIGARLES A RESPETAR EL DISEÑO DE LA HERENCIA. CUANDO HAY MUCHOS PROGRAMADORES Y ELLOS
NO SABEN CUAL SI SE DEBE ENTONCES NOSOTROS COMO DISEÑADORES DE ESTO LES DECIMOS QUE SOBREESCRIBAN ESTE Y LA META AUEVO
el sentido de la abstract es marcar la pauta a seguir en el diseño de la herencia




