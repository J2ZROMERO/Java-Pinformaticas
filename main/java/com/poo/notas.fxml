En herencia se debe de entender que existen:

Persona.
Caracteristicas comunes: Nombre-Genero-Edad- Lugar de residencia.
Comportamientos comunes: Comen - Duermen - Hablan - Se mueven.
Cada clase puede tener sus propos comportamientos (metodos o variables).
Debemos de crear una raiz general que se ocupara para todos los objetos que se van a crear.

Podemos aplicar casi siempre la regla de "Es un" de la siguiente manera:
Un jefe siempre " es un  " empleado?
Un empleado " es  un " jefe?

En este ejemplo un Jefe siempre en un Empleado
al crear la herencia se coloca a:
Empleado arriba dejandolo como superclase o clase padre
Jefe abajo

Recordar por mucho que las cosas se vean extraordinarias todo siempre tiene una base.
Una clase que no tiene constructor este lleva un constructor por defecto,entonces este se agrega con el mismo nombre de
pero vacio.
Para heredar nosotros tenemos que usar la plabra reservada extends NdClase.

Al momento en que heredamos, al heredar el constructor necesitamos usar el constructor del mismo,
aqui entra la famosa palabra SUPER() -> esto quiero decir que viene viene de la superclase llamando al constructor de la
clase padre.

- Hay algo que se llama sobre escritura de metodos
-Podemos llamar a un incentivo como "comportamiento", pensar en esto al aplicar la herencia

- si nosotros creamos dos metodos iguales halando de herencia este segtundo sobreescribe al primero
- si queremos llamar a un metodo que se llama igual al que tenemos que usar super.getMetodo() --> desde el padre
- Una clase puede sobreescribir muchos metdos.





